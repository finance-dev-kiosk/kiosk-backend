#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# APP_HOME 설정 시도

# 링크 해결: $0은 링크일 수 있음
app_path=$0

# 데이지-체인드 심볼릭 링크에 필요함.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # 경로 앞에 아무것도 없으면 끝에 /가 남음
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# 일반적으로 사용되지 않음
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# $CDPATH가 설정되어 있는 경우 cd 표준 출력을 버림 (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit

# 사용 가능한 최대값 사용하거나 MAX_FD를 -1로 설정하여 해당 값을 사용합니다.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS 특정 지원 (true 또는 false 여야 함).
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# JVM을 시작하는 데 사용할 Java 명령 결정.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM의 JDK는 AIX에서 실행 파일의 위치가 이상하게 지정되어 있음
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "오류: JAVA_HOME이 잘못된 디렉토리로 설정되어 있습니다: $JAVA_HOME

환경 변수를 설정하여 Java 설치 위치와 일치하도록 JAVA_HOME을 설정하십시오."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "오류: JAVA_HOME이 설정되지 않았으며 PATH에서 'java' 명령을 찾을 수 없습니다.

환경 변수를 설정하여 Java 설치 위치와 일치하도록 JAVA_HOME을 설정하십시오."
    fi
fi

# 파일 디스크립터 최대값을 늘립니다.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # POSIX sh에서 ulimit -H가 정의되지 않았습니다. 결과가 작동하는지 확인하기 위해 결과가 확인됩니다.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "최대 파일 디스크립터 제한을 조회할 수 없습니다."
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # POSIX sh에서 ulimit -n은 정의되지 않았습니다. 결과가 작동하는지 확인하기 위해 결과가 확인됩니다.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "최대 파일 디스크립터 제한을 $MAX_FD(으)로 설정할 수 없습니다."
    esac
fi

# Java 명령을 위한 모든 인수를 역순으로 쌓습니다.
#   * 명령 라인에서의 인수
#   * 메인 클래스 이름
#   * -classpath
#   * -D...appname 설정
#   * --module-path (필요한 경우에만)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS 및 GRADLE_OPTS 환경 변수

# Cygwin 또는 MSYS의 경우, Java를 실행하기 전에 경로를 Windows 형식으로 전환합니다.
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # 이제 인수를 변환합니다 - /bin/sh에 제한되도록 임시 조치입니다.
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # 옵션을 건드리지 않습니다. #(
              /?*)  t=${arg#/} t=/${t%%/*}              # POSIX 파일 경로처럼 보입니다.
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # args 목록을 정확히 args 수만큼 뒤로 돌립니다.
        # 따라서 각 인수는 시작한 위치로 돌아가지만
        # (아마도) 수정될 수 있습니다.
        #
        # 참고: `for` 루프는 시작하기 전에 반복 목록을 캡처하므로
        # 여기서 위치 매개변수를 변경하면 반복 횟수나
        # `arg`에 제시된 값에 영향을 미치지 않습니다.
        shift                   # 이전 인수 제거
        set -- "$@" "$arg"      # 대체 인수 푸시
    done
fi

# 여기에 기본 JVM 옵션을 추가하세요.
# JVM 옵션을 전달하기 위해 JAVA_OPTS 및 GRADLE_OPTS를 사용할 수도 있습니다.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Java 명령에 대한 모든 인수 수집:
# * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS 및 optsEnvironmentVar에 셸 조각을 포함할 수 없으며,
#   포함된 셸은 이스케이프됩니다.
# * 예를 들어 사용자는 ${Hostname}이 확장되길 기대할 수 없습니다.
#   환경 변수이며 커맨드 라인에서 '${Hostname}' 그대로 처리될 것입니다.
set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# "xargs"를 사용할 수 없을 때 중지합니다.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs를 사용할 수 없습니다."
fi

# "xargs"를 사용하여 따옴표로 묶인 인수를 구문 분석합니다.
#
# -n1로 설정하면 따옴표와 역슬래시를 제거하여 각 줄에 하나의 인수를 출력합니다.
#
# Bash에서는 간단히 다음과 같이 할 수 있습니다.
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# 그러나 POSIX 셸에는 배열이나 명령 치환 기능이 없으므로
# 각 인수(입력 줄로 변환된)를 후처리하여 셸 메타문자가 될 수 있는 문자를 역슬래시로 이스케이프하고,
# 해당 프로세스를 뒤집기 위해 eval을 사용하고, 인수 간의 분리를 유지하며,
# 전체를 단일 "set" 문으로 묶어줍니다.
#
# 물론 이러한 변수 중 하나에 새 줄이나 맞지 않는 따옴표가 포함된 경우에는 문제가 발생할 수 있습니다.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
